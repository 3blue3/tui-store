Ref: https://wrigstad.com/ioopm/assignments/assignment2.html

* Frontend Actions [3/6]
 - [X] New Merch [3/3]
   - [X] Price [2/2]
     - [X] Too Large
     - [X] Too Small
       - [X] Zero
       - [X] Negative
   - [X] Shelf [9/9]
     Tested that it does NOT accept;    
     - [X] (lower char) num num
     - [X] number
     - [X] empty
     - [X] char char char
     - [X] num char char
     - [X] (upper char) char num
     - [X] (upper char) num num num
     - [X] (upper char) num char

     Accepts;
     - [X] Tested {A, Z} num num     
   - [X] Name & Description [1/1]
     - [X] Empty string disallowed       
 - [X] List Merchendise [2/2]
   - [X] Merch added with =New Merch= showing up
   - [X] All Preloaded merch showing up
     =12/12= merch showing up.
 - [-] Remove Merchendise [4/7]
   - [X] Exit prompt
   - [-] Removing too small index disallowed 
     - [X] -1 allowed
     - [ ] Correct error message on too small index
   - [X] Removing too large index disallowed
   - [X] First index [3/3]
     - [X] Removal
     - [X] Until empty
     - [X] Correct printout 
   - [-] Removing last index [2/3]
     - [X] Removal
     - [X] Until empty
     - [ ] Correct Printout
   - [X] Removing from empty database
   - [ ] No error on (final) deallocation      
 - [-] Edit Merchendise [3/4]
   - [X] Change Desc
   - [X] Change Price [3/3]
     - [X] Disallowing too small numbers
     - [X] Disallowing too large numbers
     - [X] Correct price shows up in =list=
   - [-] Change Stock [2/3]
     - [X] Only accepts correct shelf [3/3]
       - [X] Accept setting amount to 0
       - [X] Disallow negative and too large amounts
       - [X] Exit with -1 working
     - [ ] Accepts adding a new shelf [0/1]
       - [ ] Adding new shelf shows up in list
         ==>Probably not adding to shelf database
     - [X] Correct amount shows up in =list= when changing
       (the original shelf)
   - [X] Update Storage list
 - [X] Show Stock
 - [ ] Replenish
   - [ ] Working through edit merch

** User Interface [/]
** Cart [0/8]
 - [ ] Create Cart
   - [ ] names of items to quantity
   - [ ] build as a linked list
 - [ ] Remove Cart

 - [ ] Add to Cart
 - [ ] Remove from Cart
 - [ ] Calculate Cost

 - [ ] Checkout

 - [ ] Undo
 - [ ] OPTIONAL Persistance on File

* Functions (Tested [0/44])
~NOTE~: The checkmark indicates if the function 
has been tested correctly.

- [ ] =merch_log= function name message number ::
  Helper function for logging, Prettyprinting
  a =function= name, =name=, =message= and a =number=.

- [ ] =merch_delete= store name ::
  Deallocate the merch related to =name= from
  the merch database freeing the locs list, 
  aswell as the merch struct.

- [ ] =create_merch= name desc price locs ::
  Create and allocate a merch struct.

- [ ] =print_merch= merch ::
  Pretty print a merch struct (except not its
  locs list).
  
- [ ] =add_merchendise= store name desc price ::
  Create a new merch, together with a empty 
  locs list and add it to the merch database.  

- [ ] =remove_merchendise= store name ::
  Remove =name= from the merch database (free it 
  from memory).

- [ ] =prompt_remove_merchendise= store ::
  List out all merchendise names in =merch_db= together
  with a index, prompt for a index (until a valid is 
  entered) then remove it.

- [ ] =merch_change_internal_name_function= =merch_data= =new_name= ::
  Helper function to be used with =merchendise_modify= for
  setting the internal name.

- [ ] =merch_change_description_function= =merch_data= =new_desc= ::
  Helper function to be used with =merchendise_modify= for
  setting the description.

- [ ] =merch_change_price_function= =merch_data= =new_price= ::
  Helper function to be used with =merchendise_modify= for
  setting the price.

- [ ] =merch_change_locs_function= =merch_data= =new_locs= ::
  Helper function to be used with =merchendise_modify= for
  setting the locs.

- [ ] =merchendise_new_internal_name= store name =new_name= ::
  Set the (internal) name related to =name= in the
  merch database, equal to =new_name=. 
  /(internal name is the name variable inside a merch struct)/

- [ ] =merchendise_new_desc= store name desc ::
  Set the description related to =name= in the
  merch database, equal to =desc=.

- [ ] =merchendise_new_price= store name price ::
  Set the price related to =name= in the merch database, 
  equal to =price=.

- [ ] =merchendise_new_locs= store name locs ::
  Set the locs list related to =name= in the merch 
  database, equal to =locs=.

- [ ] =merch_in_stock= store name ::
  Returns true if =name= exists in the merch database.

- [ ] =merchendise_edit= store name =new_price= =new_desc= =new_name= ::
  Updates the merch data related to =name= for the name, desc
  and price. All values which are to be changed should have
  a value != NULL, that is, if either =new_price,= =new_desc=
  or =new_name= is equal to NULL, they are ignored.

- [ ] =merchendise_modify= store name fun =fun_arg= ::
  This function applies =fun= aswell as =fun_arg=,
  to the merch data associated to =name=. Used
  together with the helper functions.

- [ ] =merch_get_desc_function= =merch_data= ::
  Helper function for extracting a 
  description from merch data.

- [ ] =merch_description= store name ::
  Lookup (and return) the description
  related to =name= in the merch db.

- [ ] =merch_price= store name ::
  Lookup (and return) the price related
  to =name= in the merch db.

- [ ] =lookup_merch_name= store index ::
  Return the name at =index= when converting 
  the hash table values into a linked list.

- [ ] =valid_index= store index :: 
  Return true, if =index= is smaller than the 
  amount of names.

- [ ] =continue_printing= ::
  Handler function prompting for "y" input, 
  upon it being "y" true is returned.

- [ ] =list_merchandise= store ::
  Printout the names of all merch in the merch
  database.

- [ ] =create_shelf= :: 
  Allocate memory for a shelf.

- [ ] =shelf_delete= shelf :: 
  Free up a shelf.

- [ ] =store_create= ::
  Allocate both hash tables (merch and storage),
  aswell as the argument handler.

- [ ] =store_destroy= store ::
  Free up the argument handler, and both hash 
  tables (the whole store structure).

- [ ] =storage_shelf_contains= store name shelf ::
  Return a true if =name= exists in the storage db
  on =shelf=.

- [ ] =remove_name_from_storage= store name shelf ::
  Remove a name from a shelf in the storage db.

- [ ] =global_change_shelf= store name shelf amount ::
  Change or Add a =shelf= to both the merch and 
  storage db at the same time associated to a =name=.

- [ ] =display_storage= store shelf ::
  Display all names stored in the storage db
  on =shelf=.

- [ ] =look_in_storage= store shelf ::
  Look in the storage db and return the 
  associated storage list.

- [ ] =remove_storage_location= store shelf ::
  Remove a storage =shelf= from the storage
  hash table, and deallocate it.
  
- [ ] =remove_all_storage_locations= store ::
  Remove all shelfs in the storage db except 
  from the hash table.

- [ ] =add_to_storage= store name shelf ::
  Add / Change a =shelf= in the storage db
  such that it contains =name=.

- [ ] =change_shelf= store name amount location ::
  Add a new shelf or change an existing 
  shelf in the merch db related to
  =name=, at =location= containing =amount=.

- [ ] =merch_locs= store name ::
  Return the locs list from the merch db
  associated to =name=.

- [ ] =list_shelfs= store name ::
  Print all shelfs in the merch db 
  related to =name=.

- [ ] =update_locs_total= store name ::
  Calculate and set the total amount 
  associated to =name=.

- [ ] =merch_locs_total= store name ::
  Add up the amount stored on each shelf
  and return the total amount associated
  to =name=.

- [ ] =merch_locs_at_shelf= store name shelf ::
  Return the total amount of merchendise 
  associated to =shelf= and =name=.

- [ ] =locs_delete= store name ::
  Remove and deallocate the locs 
  associated to =name=.  

* Macros 
- [ ] ~STORE_CREATE~ =()= 
- [ ] ~STORE_DESTROY~ =(store)= 
- [ ] ~ADD_GLOBAL_SHELF~ =(store, name, shelf_name, amount)= 
- [ ] ~HAS_SHELF~ =(store, shelf_name, name)= 
- [ ] ~PRINT_SHELF~ =(store, shelf_name)= 
- [ ] ~REMOVE_ALL_SHELFS~ =(store)= 
- [ ] ~GET_SHELF_LIST~ =(store, shelf_name)= 
- [ ] ~REMOVE_SHELF~ =(store, shelf_name)= 
- [ ] ~ADD_SHELF~ =(store, name, shelf_name)= 
- [ ] ~MERCH_CREATE~ =(name, description, price, locs)= 
- [ ] ~SHELF_CREATE~ =()= 
- [ ] ~SHELF_DESTROY~ =(shelf)=
- [X] ~MERCH_TOTAL_STOCK~ =(store, name)= 
  + Replenish
- [X] ~MERCH_STOCK~ =(store, name, shelf_name)= 
  + Replenish
- [X] ~LIST_MERCH_STOCK~ =(store, name)= 
  + Show Stock
  + TODO: Alphabetical printout
  + TODO: Shelf name formatting
- [ ] ~MERCH_IN_STOCK~ =(store, name)= 
- [X] ~SET_MERCH_DESCRIPTION~ =(store, name, description)= 
  + Edit Merchendise
- [X] ~SET_MERCH_PRICE~ =(store, name, price)= 
  + Edit Merchendise
- [ ] ~SET_MERCH_LOCS~ =(store, name, new_locs)= 
- [X] ~SET_MERCH_NAME~ =(store, name, new_name)= 
  + Edit Merchendise
- [ ] ~MERCH_DESCRIPTION~ =(store, name)= 
- [ ] ~MERCH_PRICE~ =(store, name)= 
- [ ] ~MERCH_PRINT_ALL_SHELFS~ =(store, name)= 
- [X] ~SET_MERCH_SHELF_STOCK~ =(store, name, amount, shelf_name)= 
  + Replenish 
- [ ] ~ADD_MERCH_SHELF~ =(store, name, amount, shelf_name)= 
- [ ] ~PRINT_MERCH~ =(merch)= 
- [X] ~LIST_MERCH~ =(store)= 
  + List Merchendise
- [ ] ~PROMPT_REMOVE_MERCH~ =(store)= 
- [X] ~REMOVE_MERCH~ =(store, name)= 
  + Remove Merchendise
- [X] ~ADD_MERCH~ =(store, name, description, price)= 
  + Add Merchendise
- [ ] ~QLOG~ =(store, fun, msg)=		
- [ ] ~OMLOG~ =(store, fun, name, msg,i)=		
- [ ] ~MLOG~ =(store, fun, name, msg)=		
- [ ] ~get_elem_ptr~ =(e)= 
  
* TODO Non Functional Requirements [0/4]
** TODO Separate Code into Modules [0/1]
>> ~Check if the file is used.~ <<

- [-] Find out which files to keep, what to keep in them. 
  - [X]  =Webstore.c=    :: Merchendise API, and Storage API
  - [X]  =hash_table.c=  :: Hash Table implomentation
  - [X]  =linked_list.c= :: Linked List implomentation
  - [X]  =common.c=      :: Argument Handler + General Macros 
    and Helper Functions
  - [X]  =iterator.c=    :: Iterator implomentation
  - [ ]  =utils.c=       :: General utilities
    Move some utilities here?
  - [ ]  =test.c=        :: Unit Testing 
  - [ ]  =db.c=          :: Generic Database functions
    Move some functions here?
  - [X]  =cart.c=        :: Shoppingcart API
  - TODO: Add a module for the UI?

** TODO Find team to do a code review [0/1]
- [ ] [[https://en.wikipedia.org/wiki/Code_review][Need to find a team to review the code]]
** TODO Testing [0/1]
- [ ] Testing should be done in CUnit.
  Focus should be on individual backend methods

#+begin_quote
Unittests will focus on invididual methods in the backend. For
example, adding a new merchendise will test the behaviour on good and
back input (how handle duplicates?), and check that stock for new
merchendise come back as zero.

Note that you are building on data structure libraries that come with
a set of tests. We don’t need to test that e.g., the hash table is
correct in our tests – we should test that the treatment of
merchendise, items, storage locations etc. are correct. That means we
are staying (at least) one solid level of abstraction above the hash
table, list, etc.
#+end_quote

** TODO Documentation [0/2]
- [ ] Documentation of the code is done in Doxygen.
- [ ] The sources of borrowed code 
  (hash table, linked list, utils, ...)
  should be stated in the [[./README.md]].

*** README.md reference example
  #+begin_quote
Hash table comes from Alice’s Assignment 1
Linked list comes from Cecil’s Assignment 1
Utils comes from Bob’s C bootstrap labs
  #+end_quote

* TODO Finishing the Assignment [0/6]
- [ ] At the end, go over your backlog of cheats and dodges and see which
  ones need taking care of. Ideally this stack should be empty. If you
  have made any special deals for some parts of your code, make sure
  these are documented somewhere (in the repo).

- [ ] As the first section of README.md, add instructions for how to build
  the program and run its tests. Ideally this should be as easy as
  make test. In this section, also state the line coverage and branch
  coverage per .c file and what tool you used to obtain these numbers.

- [ ] Write a minimal documentation of how to use your program – after
  building it, how does one start it, and what files etc. (if
  anything) must be present. Put this in a README.md in the top-level
  directory for this assignment.

- [ ] Prepare a demonstration of z101 to give at the next lab. In addition
  to z101, pick another 2-3 achievements to tick off, and include
  these in your demonstration preparation. To back up your
  presentation, present evidence like places in your code where
  relevant things show up, documentation, paper drawings, etc. –
  things that support your demonstration. Think carefully about what
  things fit together (ask for help if you feel uncertain after
  trying) and what achievements tell a good story together. Make sure
  that not one person dominates the demonstration or answers all
  questions to avoid someone failing the demonstration because there
  was no evidence of achievements mastery.

- [ ] Send an email to ioopm@it.uu.se with your names and usernames, a
  link to the GitHub repository where the code can be checked out.

- [ ] Create a final commit for the assignment and check it into
  GitHub. Tag the commit with assignment2_done.

* Backend Design

hash table
key: hylla value: =elem_t= (ptr->linked list) 

Bil A1



** Hash Table 1 
=Key=:   Name
=Value=: Pointer to [[Item structure]].

** Hash Table 2
=Key=:   Shelf 
=Value=: List of all items stored there.

** Misc

<<Item Structure>>
  - Name
  - Description
  - Price
  - Amount
  - List of [[Shelf Structure]]s and amount in each shelf

<<Shelf Structure>>
  - Shelf Name
  - Quantity


** Requirements

1. Given the name of an item, 
   find its information

2. Given the name of an item, 
   find its storage locations in the warehouse

3. Given a storage location, 
   find what is stored on it

We can design a struct *S* that holds the information about an item
*i* as well as a list *L* of the locations in the warehouse storing
*i*’s, including the number of items at each location.


- Item i   (Item)
- Struct S (Information regarding i)
- List L   (Locations of i)

We can then use our hash table from Assignment 1 using 

*** HT1 
 Hash Table with  [ ~HTn→S~ ]
  - names of items as keys
  - pointers to instances of S as values.

 =HTn→S=: a central hash table mapping names1 of 
 items to their information.

*** HT2
 Hash Table with [ ~HTs→n~ ]
  - storage location names as keys
  - items (or item names) as values. 

 =HTs→n= a central hash table mapping names of storage 
 locations to names of items stored on the location
 for each item S, a list L of the locations where it is
 stored, and the amount stored at each location

 _Need to keep HTn→S and HTs→n in sync_






