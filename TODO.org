Ref: https://wrigstad.com/ioopm/assignments/assignment2.html#orgc922f78
change
* Frontend Actions [3/6]
 - [X] Add Merchandise
 - [X] List Merchendise
 - [X] Remove Merchendise
 - [-] Edit Merchendise [3/5]
   - [X] Change Name 
     - [X] Can’t change to an existing name.
     - [X] Change the Hash Table Index
   - [X] Change Desc
   - [X] Change Price
   - [-] Create a interactive interface ?
   - [ ] Update Storage list
 - [ ] Show Stock
 - [ ] Replenish

** User Interface [/]
** Cart [0/8]
 - [ ] Create Cart
   - [ ] names of items to quantity
   - [ ] build as a linked list
 - [ ] Remove Cart

 - [ ] Add to Cart
 - [ ] Remove from Cart
 - [ ] Calculate Cost

 - [ ] Checkout

 - [ ] Undo
 - [ ] OPTIONAL Persistance on File

* Functions
- =merch_log=
- =merch_delete=
- =create_merch=
- =print_merch=
- =add_merchendise=
- =remove_merchendise=
- =prompt_remove_merchendise=
- =merch_change_internal_name_function=
- =merch_change_description_function=
- =merch_change_price_function=
- =merch_change_locs_function=
- =merchendise_new_internal_name=
- =merchendise_new_desc=
- =merchendise_new_price=
- =merchendise_new_locs=
- =merch_in_stock=
- =merchendise_edit=
- =merchendise_modify=
- =merch_get_desc_function=
- =merch_description=
- =merch_price=
- =lookup_merch_name=
- =valid_index=
- =continue_printing=
- =list_merchandise=
- =create_shelf=
- =shelf_delete=
- =store_create=
- =store_destroy=

- =storage_shelf_contains= store name shelf ::
  Return a true if =name= exists in the storage db
  on =shelf=.

- =remove_name_from_storage= store name shelf ::
  Remove a name from a shelf in the storage db.

- =global_change_shelf= store name shelf amount ::
  Change or Add a =shelf= to both the merch and 
  storage db at the same time associated to a =name=.

- =display_storage= store shelf ::
  Display all names stored in the storage db
  on =shelf=.

- =look_in_storage= store shelf ::
  Look in the storage db and return the 
  associated storage list.

- =remove_storage_location= store shelf ::
  Remove a storage =shelf= from the storage
  hash table, and deallocate it.
  
- =remove_all_storage_locations= store ::
  Remove all shelfs in the storage db except 
  from the hash table.

- =add_to_storage= store name shelf ::
  Add / Change a =shelf= in the storage db
  such that it contains =name=.

- =change_or_add_shelf= store name amount location ::
  Add a new shelf or change an existing 
  shelf in the merch db related to
  =name=, at =location= containing =amount=.

- =merch_locs= store name ::
  Return the locs list from the merch db
  associated to =name=.

- =list_shelfs= store name ::
  Print all shelfs in the merch db 
  related to =name=.

- =update_locs_total= store name ::
  Calculate and set the total amount 
  associated to =name=.

- =merch_locs_total= store name ::
  Add up the amount stored on each shelf
  and return the total amount associated
  to =name=.

- =merch_locs_at_shelf= store name shelf ::
  Return the total amount of merchendise 
  associated to =shelf= and =name=.

- =locs_delete= store name ::
  Remove and deallocate the locs 
  associated to =name=.  

* Backend Design

hash table
key: hylla value: =elem_t= (ptr->linked list) 

Bil A1



** Hash Table 1 
=Key=:   Name
=Value=: Pointer to [[Item structure]].

** Hash Table 2
=Key=:   Shelf 
=Value=: List of all items stored there.

** Misc

<<Item Structure>>
  - Name
  - Description
  - Price
  - Amount
  - List of [[Shelf Structure]]s and amount in each shelf

<<Shelf Structure>>
  - Shelf Name
  - Quantity


** Requirements

1. Given the name of an item, 
   find its information

2. Given the name of an item, 
   find its storage locations in the warehouse

3. Given a storage location, 
   find what is stored on it

We can design a struct *S* that holds the information about an item
*i* as well as a list *L* of the locations in the warehouse storing
*i*’s, including the number of items at each location.


- Item i   (Item)
- Struct S (Information regarding i)
- List L   (Locations of i)

We can then use our hash table from Assignment 1 using 

*** HT1 
 Hash Table with  [ ~HTn→S~ ]
  - names of items as keys
  - pointers to instances of S as values.

 =HTn→S=: a central hash table mapping names1 of 
 items to their information.

*** HT2
 Hash Table with [ ~HTs→n~ ]
  - storage location names as keys
  - items (or item names) as values. 

 =HTs→n= a central hash table mapping names of storage 
 locations to names of items stored on the location
 for each item S, a list L of the locations where it is
 stored, and the amount stored at each location

 _Need to keep HTn→S and HTs→n in sync_




